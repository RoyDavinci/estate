generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  user_id       Int          @id @default(autoincrement())
  firstname     String?      @db.VarChar(200)
  lastname      String?      @db.VarChar(200)
  email         String       @unique(map: "email_unique") @db.VarChar(200)
  password      String       @db.VarChar(200)
  role          Role         @default(user)
  created_at    DateTime     @default(now()) @db.Timestamp(0)
  updated_at    DateTime?    @db.Timestamp(0)
  adminId       Int?         @unique
  agentId       Int?         @unique
  subscriberId  Int?         @unique
  subscribers   subscribers? @relation(fields: [subscriberId], references: [subscriberId])
  admin         admin?       @relation(fields: [adminId], references: [adminId])
  agent         agents?      @relation(fields: [agentId], references: [agentId])
  accountStatus Int          @default(1234567890)
}

model subscribers {
  subscriberId Int       @id @default(autoincrement())
  firstname    String?   @db.VarChar(200)
  lastname     String?   @db.VarChar(200)
  email        String    @unique(map: "unique_mail") @db.VarChar(200)
  role         Role      @default(subscriber)
  user         users?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
  orderId      orders[]
}

model admin {
  adminId   Int        @id @default(autoincrement())
  firstname String?    @db.VarChar(200)
  lastname  String?    @db.VarChar(200)
  email     String     @unique(map: "unique_mail") @db.VarChar(200)
  role      Role       @default(Admin)
  user      users?
  createdAt DateTime   @default(now())
  products  products[]
  updatedAt DateTime?
}

model agents {
  agentId   Int        @id @default(autoincrement())
  firstname String?    @db.VarChar(200)
  lastname  String?    @db.VarChar(200)
  email     String     @unique(map: "unique_mail") @db.VarChar(200)
  role      Role       @default(Admin)
  user      users?
  createdAt DateTime   @default(now())
  products  products[]
  updatedAt DateTime?
}

model products {
  productId   Int        @id @default(autoincrement())
  productName String     @db.VarChar(200)
  location    String     @db.VarChar(200)
  adminId     Int?
  agentId     Int?
  admin       admin?     @relation(fields: [adminId], references: [adminId])
  agent       agents?    @relation(fields: [agentId], references: [agentId])
  url         imageUrl[]
  price       Decimal    @db.Decimal(10, 5)
  description String?    @db.VarChar(225)
  video       String?    @db.Text
  title       String?
  available   Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?
}

model imageUrl {
  url       String
  productId Int
  product   products @relation(fields: [productId], references: [productId], onDelete: Cascade)

  @@id([url, productId])
  @@index([productId])
}

model guest {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  address String?
  mobile  String?
  orderId orders[]
}

model orders {
  orderId        Int           @id @default(autoincrement())
  product_detail Json
  name           String
  email          String?
  phone          String
  total_amount   String
  address        String?
  userId         Int?
  guestId        Int?
  guests         guest?        @relation(fields: [guestId], references: [id])
  subscribers    subscribers?  @relation(fields: [userId], references: [subscriberId])
  status         Status        @default(pending)
  transactions   transaction[]
  order_date     DateTime      @default(now())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime?
}

model transaction {
  id                    Int       @id @default(autoincrement())
  orderId               Int       @unique
  orders                orders    @relation(fields: [orderId], references: [orderId])
  phone                 String
  email                 String
  total_amount          String
  biller_Reference      String
  transaction_reference String
  channel               String?
  status                Status
  product_name          String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime?
}

enum Status {
  pending
  failed
  processing
  successful
}

enum Role {
  Super_Admin
  Admin
  user
  subscriber
}
